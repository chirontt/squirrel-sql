plugins {
	id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.9'  //requires JDK11+
}

wrapper {
    gradleVersion = '6.8.3'
    distributionType = Wrapper.DistributionType.ALL
}

group = 'squirrel-sql'

def currDate = new Date()
def DSTAMP = currDate.format('yyyyMMdd')
def TSTAMP = currDate.format('HHmm')

//DEFINE VERSION HERE ONLY
//version = '0.'  //release version
version = "snapshot-${DSTAMP}_${TSTAMP}"

defaultTasks 'buildAll'

ext {
    mainClassName = 'org.squirrelsql.Main'
    launcherClassName = 'org.squirrelsql.Launcher'

    //3rd-party libraries in core/lib, for the compile classpath
    coreLibClasspath = fileTree(dir: 'core/lib', include: '*.jar', exclude: 'versioncheck.jar')
    javafxVersion = '15.0.1'
}

repositories {
    mavenCentral()
    mavenLocal()
}

compileJava {
    options.release = 11  //use JDK11+ for compiling & running
    options.encoding = 'UTF-8'
}

javafx {
    version = javafxVersion
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.swing']
}

configurations {
    //define a configuration for all supported OS native libraries of JavaFX
    allJavaFXnatives
}

dependencies {
    implementation coreLibClasspath

    ['linux', 'mac', 'win'].each { classifier ->
        allJavaFXnatives "org.openjfx:javafx-base:$javafxVersion:$classifier"
        allJavaFXnatives "org.openjfx:javafx-controls:$javafxVersion:$classifier"
        allJavaFXnatives "org.openjfx:javafx-fxml:$javafxVersion:$classifier"
        allJavaFXnatives "org.openjfx:javafx-graphics:$javafxVersion:$classifier"
        allJavaFXnatives "org.openjfx:javafx-swing:$javafxVersion:$classifier"
    }
}

application {
    mainClass = project.mainClassName
}

sourceSets {
    main {
        java {
            srcDirs = ['core/src']
        }
        resources {
            //initialize the srcDirs property to remove the default src/main/resources,
            //and add other resources from core/src (excluding *.java by default)
            srcDirs = ['core/src']
        }
    }
}

processResources {
    filesMatching('org/squirrelsql/splash/Version.properties') {
        filter { line ->
            line.replace('squirrelsql.version.value', version)
        }
        filteringCharset = java.nio.charset.StandardCharsets.UTF_8
    }
}

//custom tasks for creating different jar file for different distribution
def createJarFile(distType) {
    def distTypes = ['portable', 'currentOS']
    if (!distTypes.contains(distType)) {
        throw new GradleException("Wrong distribution type: ${distType}. Valid distribution types are: $distTypes")
    }

    def osString = distType=='portable' ? 'portable' : javafx.platform.classifier

    return tasks.create("create${osString}JarTask", Jar) {
        archiveFileName = "squirrel-sql-fx-${osString}.jar"

        def mainClasspath = osString=='portable' ? coreLibClasspath : configurations.runtimeClasspath
        manifest {
            attributes(
                'Main-Class': project.launcherClassName,
                'Class-Path': mainClasspath.collect { 'lib/' + it.name }.join(' '),
                'JavaFX-Version': javafxVersion,
                'Built-By': System.getProperty('user.name'),
                'Created-By': System.getProperty('java.runtime.version') + ' (' + System.getProperty('java.vendor') + ')',
                'Gradle-Version': 'Gradle ' + gradle.getGradleVersion(),
            )
        }

        from (sourceSets.main.output)
        if (osString == 'portable') {
            from {
                configurations.allJavaFXnatives.collect { it.isDirectory() ? it : zipTree(it) }
            }
            duplicatesStrategy 'exclude'
        }
    }
}

run {
    //args '--p=<propertiesFilePath>'

    debugOptions {
        enabled = true
        port = 5566
        server = true
        suspend = false
    }
}

//custom tasks for creating zip distributions
def createZipDistribution(distType) {
    def distTypes = ['portable', 'currentOS']
    if (!distTypes.contains(distType)) {
        throw new GradleException("Wrong distribution type: ${distType}. Valid distribution types are: $distTypes")
    }

    def osString = distType=='portable' ? 'portable' : javafx.platform.classifier

    return tasks.create("createPlainZip${osString}Task", Zip) {
        destinationDirectory = file("$buildDir/plainZip")

        def internalFolder = "squirrelsqlfx-$project.version-$osString"
        archiveFileName = internalFolder + '.zip'

        into internalFolder

        from (createJarFile(distType)) {
            rename "(.+)-${osString}(.+)", '$1$2'
        }

        if (osString == 'portable') {
            from ('launcher') {
                include '**/*'
            }
        }
        else if (osString == 'win') {
            from ('launcher') {
                include '*.bat'
            }
        }
        else {
            from ('launcher') {
                include '*.sh'
            }
        }

        from ('core') {
            include 'doc/**'
        }

        from ('core/lib') {
            include 'versioncheck.jar'
            into 'versioncheck'
        }

        if (osString == 'portable') {
            //exclude JavaFX native libraries, to be portable, from the 'lib' sub-folder
            //(native libraries are already packaged in the squirrel-sql-fx.jar)
            from (coreLibClasspath) {
                into 'lib'
            }
        }
        else {
            //include JavaFX native libraries (of the current OS running the build)
            //to the 'lib' sub-folder
            from (configurations.runtimeClasspath) {
                into 'lib'
            }
        }

        from ('core/src/org/squirrelsql/globalicons') {
            include 'splash.jpg'
            into 'icons'
        }
    }
}

task createZipDistributions {
    dependsOn createZipDistribution('portable'),
              createZipDistribution('currentOS')
}

task runApp {
    //execute the 'application' plugin's run task
    dependsOn run
}

task buildAll {
    dependsOn createZipDistributions
}
